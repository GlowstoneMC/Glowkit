From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: aki_ks <aki@kaysubs.de>
Date: Tue, 3 Jul 2018 18:09:25 +0200
Subject: [PATCH] Allow transforming plugin classes

diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 7e5149a2..b4f1c54e 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -50,7 +50,7 @@ import org.yaml.snakeyaml.error.YAMLException;
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
 @Deprecated(forRemoval = true) // Paper - The PluginLoader system will not function in the near future. This implementation will be moved.
-public final class JavaPluginLoader implements PluginLoader {
+public class JavaPluginLoader implements PluginLoader {
     final Server server;
     private static final boolean DISABLE_CLASS_PRIORITIZATION = Boolean.getBoolean("Paper.DisableClassPrioritization"); // Paper
     private final Pattern[] fileFilters = new Pattern[]{Pattern.compile("\\.jar$")};
@@ -151,7 +151,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
         final PluginClassLoader loader;
         try {
-            loader = new PluginClassLoader(this, getClass().getClassLoader(), description, dataFolder, file, (libraryLoader != null) ? libraryLoader.createLoader(description) : null);
+            loader = newPluginLoader(this, getClass().getClassLoader(), description, dataFolder, file, (libraryLoader != null) ? libraryLoader.createLoader(description) : null);
         } catch (InvalidPluginException ex) {
             throw ex;
         } catch (Throwable ex) {
@@ -163,6 +163,10 @@ public final class JavaPluginLoader implements PluginLoader {
         return loader.plugin;
     }
 
+    protected PluginClassLoader newPluginLoader(JavaPluginLoader loader, ClassLoader parent, PluginDescriptionFile description, File dataFolder, File file, ClassLoader libraryLoader) throws Exception {
+        return new PluginClassLoader(loader, parent, description, dataFolder, file, libraryLoader);
+    }
+
     @Override
     @NotNull
     public PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException {
@@ -210,11 +214,11 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     @Nullable
-    Class<?> getClassByName(final String name, boolean resolve, PluginDescriptionFile description) {
+    protected Class<?> getClassByName(final String name, boolean resolve, PluginDescriptionFile description) {
         // Paper start - prioritize self
         return getClassByName(name, resolve, description, null);
     }
-    Class<?> getClassByName(final String name, boolean resolve, PluginDescriptionFile description, PluginClassLoader requester) {
+    protected Class<?> getClassByName(final String name, boolean resolve, PluginDescriptionFile description, PluginClassLoader requester) {
         // Paper end
         // Paper start - make MT safe
         java.util.concurrent.locks.ReentrantReadWriteLock lock;
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index cb3c25ef..ca4e171f 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -29,7 +29,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
-public final class PluginClassLoader extends URLClassLoader { // Spigot
+public class PluginClassLoader extends URLClassLoader { // Spigot
     public JavaPlugin getPlugin() { return plugin; } // Spigot
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
@@ -50,7 +50,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         ClassLoader.registerAsParallelCapable();
     }
 
-    PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @Nullable ClassLoader libraryLoader) throws IOException, InvalidPluginException, MalformedURLException {
+    public PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @Nullable ClassLoader libraryLoader) throws IOException, InvalidPluginException, MalformedURLException {
         super(file.getName(), new URL[] {file.toURI().toURL()}, parent); // Paper - rewrite LogEvents to contain source jar info
         Preconditions.checkArgument(loader != null, "Loader cannot be null");
 
@@ -220,6 +220,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                 CodeSigner[] signers = entry.getCodeSigners();
                 CodeSource source = new CodeSource(url, signers);
 
+                classBytes = transformBytecode(classBytes);
                 result = defineClass(name, classBytes, 0, classBytes.length, source);
             }
 
@@ -234,6 +235,10 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         return result;
     }
 
+    protected byte[] transformBytecode(byte[] bytecode) {
+        return bytecode;
+    }
+
     @Override
     public void close() throws IOException {
         try {
