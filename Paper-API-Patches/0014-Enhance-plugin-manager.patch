From f306e8ef0abeff792965dc65eadde0d41ff7ef4c Mon Sep 17 00:00:00 2001
From: mastercoms <circuitsoft@tuta.io>
Date: Fri, 25 Nov 2016 12:25:01 -0500
Subject: [PATCH] Enhance plugin manager


diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index e5638d5..da1e5a9 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -1,14 +1,16 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.util.Set;
-
 import org.bukkit.event.Event;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 
+import java.io.File;
+import java.net.URL;
+import java.util.Collection;
+import java.util.Set;
+
 /**
  * Handles all plugin management from the Server
  */
@@ -83,6 +85,29 @@ public interface PluginManager {
     public Plugin[] loadPlugins(File directory);
 
     /**
+     * Loads the array of plugins
+     *
+     * @param files Array of plugin files to load
+     * @param sourceFolder Containing folder path name string for error messages
+     * @return A list of all plugins loaded
+     */
+    public Plugin[] loadPlugins(File[] files, String sourceFolder);
+
+    /**
+     * Adds a plugin file URL to skip loading for
+     *
+     * @param url The plugin file URL
+     */
+    public void addIgnoredURL(URL url);
+
+    /**
+     * Adds plugin file URLs to skip loading for
+     *
+     * @param urls The plugin file URLs
+     */
+    public void addIgnoredURL(Collection<URL> urls);
+
+    /**
      * Disables all the loaded plugins
      */
     public void disablePlugins();
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 9ce0a5d..43d6726 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -1,26 +1,9 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.WeakHashMap;
-import java.util.logging.Level;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerEventException;
 import com.destroystokyo.paper.exception.ServerPluginEnableDisableException;
+import com.google.common.collect.ImmutableSet;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
@@ -35,7 +18,15 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 import org.bukkit.util.FileUtil;
 
-import com.google.common.collect.ImmutableSet;
+import java.io.File;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * Handles all plugin management from the Server
@@ -52,6 +43,7 @@ public final class SimplePluginManager implements PluginManager {
     private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<String, Map<Permissible, Boolean>>();
     private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<Boolean, Map<Permissible, Boolean>>();
     private boolean useTimings = false;
+    private Collection<URL> ignoreURLs = new ArrayList<>();
 
     public SimplePluginManager(Server instance, SimpleCommandMap commandMap) {
         server = instance;
@@ -114,13 +106,29 @@ public final class SimplePluginManager implements PluginManager {
             updateDirectory = new File(directory, server.getUpdateFolder());
         }
 
+        return loadPlugins(directory.listFiles(), directory.getPath());
+    }
+
+    public Plugin[] loadPlugins(File[] files, String sourceFolder) {
+        List<Plugin> result = new ArrayList<Plugin>();
+        Set<Pattern> filters = fileAssociations.keySet();
         Map<String, File> plugins = new HashMap<String, File>();
         Set<String> loadedPlugins = new HashSet<String>();
         Map<String, Collection<String>> dependencies = new HashMap<String, Collection<String>>();
         Map<String, Collection<String>> softDependencies = new HashMap<String, Collection<String>>();
 
         // This is where it figures out all possible plugins
-        for (File file : directory.listFiles()) {
+        for (File file : files) {
+            // Skip plugins in the ignore set
+            try {
+                URL url = file.toURI().toURL();
+                if (ignoreURLs.contains(url)) {
+                    continue;
+                }
+            } catch (MalformedURLException ignore) {
+                // ignored
+            }
+
             PluginLoader loader = null;
             for (Pattern filter : filters) {
                 Matcher match = filter.matcher(file.getName());
@@ -131,22 +139,22 @@ public final class SimplePluginManager implements PluginManager {
 
             if (loader == null) continue;
 
-            PluginDescriptionFile description = null;
+            PluginDescriptionFile description;
             try {
                 description = loader.getPluginDescription(file);
                 String name = description.getName();
                 if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
-                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': Restricted Name");
+                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + sourceFolder + "': Restricted Name");
                     continue;
                 } else if (description.rawName.indexOf(' ') != -1) {
                     server.getLogger().warning(String.format(
                         "Plugin `%s' uses the space-character (0x20) in its name `%s' - this is discouraged",
                         description.getFullName(),
                         description.rawName
-                        ));
+                    ));
                 }
             } catch (InvalidDescriptionException ex) {
-                server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
+                server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + sourceFolder + "'", ex);
                 continue;
             }
 
@@ -157,8 +165,8 @@ public final class SimplePluginManager implements PluginManager {
                     description.getName(),
                     file.getPath(),
                     replacedFile.getPath(),
-                    directory.getPath()
-                    ));
+                    sourceFolder
+                ));
             }
 
             Collection<String> softDependencySet = description.getSoftDepend();
@@ -208,7 +216,7 @@ public final class SimplePluginManager implements PluginManager {
                         if (loadedPlugins.contains(dependency)) {
                             dependencyIterator.remove();
 
-                        // We have a dependency not found
+                            // We have a dependency not found
                         } else if (!plugins.containsKey(dependency)) {
                             missingDependency = false;
                             File file = plugins.get(plugin);
@@ -218,7 +226,7 @@ public final class SimplePluginManager implements PluginManager {
 
                             server.getLogger().log(
                                 Level.SEVERE,
-                                "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'",
+                                "Could not load '" + file.getPath() + "' in folder '" + sourceFolder + "'",
                                 new UnknownDependencyException(dependency));
                             break;
                         }
@@ -229,16 +237,9 @@ public final class SimplePluginManager implements PluginManager {
                     }
                 }
                 if (softDependencies.containsKey(plugin)) {
-                    Iterator<String> softDependencyIterator = softDependencies.get(plugin).iterator();
-
-                    while (softDependencyIterator.hasNext()) {
-                        String softDependency = softDependencyIterator.next();
 
-                        // Soft depend is no longer around
-                        if (!plugins.containsKey(softDependency)) {
-                            softDependencyIterator.remove();
-                        }
-                    }
+                    // Soft depend is no longer around
+                    softDependencies.get(plugin).removeIf(softDependency -> !plugins.containsKey(softDependency));
 
                     if (softDependencies.get(plugin).isEmpty()) {
                         softDependencies.remove(plugin);
@@ -253,9 +254,8 @@ public final class SimplePluginManager implements PluginManager {
                     try {
                         result.add(loadPlugin(file));
                         loadedPlugins.add(plugin);
-                        continue;
                     } catch (InvalidPluginException ex) {
-                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
+                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + sourceFolder + "'", ex);
                     }
                 }
             }
@@ -279,7 +279,7 @@ public final class SimplePluginManager implements PluginManager {
                             loadedPlugins.add(plugin);
                             break;
                         } catch (InvalidPluginException ex) {
-                            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
+                            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + sourceFolder + "'", ex);
                         }
                     }
                 }
@@ -292,13 +292,21 @@ public final class SimplePluginManager implements PluginManager {
                     while (failedPluginIterator.hasNext()) {
                         File file = failedPluginIterator.next();
                         failedPluginIterator.remove();
-                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': circular dependency detected");
+                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + sourceFolder + "': circular dependency detected");
                     }
                 }
             }
         }
 
-        return result.toArray(new Plugin[result.size()]);
+        return result.stream().toArray(Plugin[]::new);
+    }
+
+    public void addIgnoredURL(URL url) {
+        ignoreURLs.add(url);
+    }
+
+    public void addIgnoredURL(Collection<URL> urls) {
+        ignoreURLs.addAll(urls);
     }
 
     /**
-- 
2.10.2

