From 7aaaef7b7b5178174fa45cde3b53dece0d35ded9 Mon Sep 17 00:00:00 2001
From: mastercoms <circuitsoft@tuta.io>
Date: Sun, 20 Nov 2016 12:52:14 -0500
Subject: [PATCH] Add missing MaterialData


diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 6206223..5cfa875 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -1,77 +1,22 @@
 package org.bukkit;
 
-import java.lang.reflect.Constructor;
-import java.util.Arrays;
-import java.util.Map;
-
+import com.google.common.collect.Maps;
 import org.apache.commons.lang.Validate;
 import org.bukkit.map.MapView;
-import org.bukkit.material.Bed;
-import org.bukkit.material.Button;
-import org.bukkit.material.Cake;
-import org.bukkit.material.Cauldron;
-import org.bukkit.material.Chest;
-import org.bukkit.material.Coal;
-import org.bukkit.material.CocoaPlant;
-import org.bukkit.material.Command;
-import org.bukkit.material.Comparator;
-import org.bukkit.material.Crops;
-import org.bukkit.material.DetectorRail;
-import org.bukkit.material.Diode;
-import org.bukkit.material.Dispenser;
-import org.bukkit.material.Door;
-import org.bukkit.material.Dye;
-import org.bukkit.material.EnderChest;
-import org.bukkit.material.FlowerPot;
-import org.bukkit.material.Furnace;
-import org.bukkit.material.Gate;
-import org.bukkit.material.Hopper;
-import org.bukkit.material.Ladder;
-import org.bukkit.material.Leaves;
-import org.bukkit.material.Lever;
-import org.bukkit.material.LongGrass;
-import org.bukkit.material.MaterialData;
-import org.bukkit.material.MonsterEggs;
-import org.bukkit.material.Mushroom;
-import org.bukkit.material.NetherWarts;
-import org.bukkit.material.PistonBaseMaterial;
-import org.bukkit.material.PistonExtensionMaterial;
-import org.bukkit.material.PoweredRail;
-import org.bukkit.material.PressurePlate;
-import org.bukkit.material.Pumpkin;
-import org.bukkit.material.Rails;
-import org.bukkit.material.RedstoneTorch;
-import org.bukkit.material.RedstoneWire;
-import org.bukkit.material.Sandstone;
-import org.bukkit.material.Sapling;
-import org.bukkit.material.Sign;
-import org.bukkit.material.Skull;
-import org.bukkit.material.SmoothBrick;
-import org.bukkit.material.SpawnEgg;
-import org.bukkit.material.Stairs;
-import org.bukkit.material.Step;
-import org.bukkit.material.Torch;
-import org.bukkit.material.TrapDoor;
-import org.bukkit.material.Tree;
-import org.bukkit.material.Tripwire;
-import org.bukkit.material.TripwireHook;
-import org.bukkit.material.Vine;
-import org.bukkit.material.Wood;
-import org.bukkit.material.WoodenStep;
-import org.bukkit.material.Wool;
+import org.bukkit.material.*;
 
-import com.google.common.collect.Maps;
-
-import org.bukkit.material.Banner;
+import java.lang.reflect.Constructor;
+import java.util.Arrays;
+import java.util.Map;
 
 /**
  * An enum of all material IDs accepted by the official server and client
  */
 public enum Material {
     AIR(0, 0),
-    STONE(1),
+    STONE(1, Stone.class),
     GRASS(2),
-    DIRT(3),
+    DIRT(3, Dirt.class),
     COBBLESTONE(4),
     WOOD(5, Wood.class),
     SAPLING(6, Sapling.class),
@@ -80,14 +25,14 @@ public enum Material {
     STATIONARY_WATER(9, MaterialData.class),
     LAVA(10, MaterialData.class),
     STATIONARY_LAVA(11, MaterialData.class),
-    SAND(12),
+    SAND(12, Sand.class),
     GRAVEL(13),
     GOLD_ORE(14),
     IRON_ORE(15),
     COAL_ORE(16),
     LOG(17, Tree.class),
     LEAVES(18, Leaves.class),
-    SPONGE(19),
+    SPONGE(19, Sponge.class),
     GLASS(20),
     LAPIS_ORE(21),
     LAPIS_BLOCK(22),
@@ -236,14 +181,14 @@ public enum Material {
     SLIME_BLOCK(165),
     BARRIER(166),
     IRON_TRAPDOOR(167, TrapDoor.class),
-    PRISMARINE(168),
+    PRISMARINE(168, Prismarine.class),
     SEA_LANTERN(169),
     HAY_BLOCK(170),
     CARPET(171),
     HARD_CLAY(172),
     COAL_BLOCK(173),
     PACKED_ICE(174),
-    DOUBLE_PLANT(175),
+    DOUBLE_PLANT(175, DoublePlant.class),
     STANDING_BANNER(176, Banner.class),
     WALL_BANNER(177, Banner.class),
     DAYLIGHT_DETECTOR_INVERTED(178),
diff --git a/src/main/java/org/bukkit/material/Dirt.java b/src/main/java/org/bukkit/material/Dirt.java
new file mode 100644
index 0000000..adcaca6
--- /dev/null
+++ b/src/main/java/org/bukkit/material/Dirt.java
@@ -0,0 +1,83 @@
+package org.bukkit.material;
+
+import org.bukkit.Material;
+import org.bukkit.material.types.DirtType;
+
+/**
+ * Represents the different types of dirt.
+ */
+public class Dirt extends MaterialData {
+
+    public Dirt() {
+        super(Material.DIRT);
+    }
+
+    public Dirt(DirtType dirt) {
+        this();
+        setType(dirt);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     */
+    @Deprecated
+    public Dirt(final int type) {
+        super(type);
+    }
+
+    public Dirt(final Material type) {
+        super(type);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Dirt(final int type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Dirt(final Material type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * Gets the current type of this dirt.
+     *
+     * @return The type of dirt
+     */
+    public DirtType getType() {
+        return DirtType.getByData(getData());
+    }
+
+    /**
+     * Sets the type of this dirt.
+     *
+     * @param type The new type of dirt
+     */
+    public void setType(DirtType type) {
+        setData(type.getData());
+    }
+
+    @Override
+    public String toString() {
+        return getType() + " " + super.toString();
+    }
+
+    @Override
+    public Dirt clone() {
+        return (Dirt) super.clone();
+    }
+}
diff --git a/src/main/java/org/bukkit/material/DoublePlant.java b/src/main/java/org/bukkit/material/DoublePlant.java
new file mode 100644
index 0000000..7c93512
--- /dev/null
+++ b/src/main/java/org/bukkit/material/DoublePlant.java
@@ -0,0 +1,83 @@
+package org.bukkit.material;
+
+import org.bukkit.Material;
+import org.bukkit.material.types.DoublePlantSpecies;
+
+/**
+ * Represents the different types of double plants.
+ */
+public class DoublePlant extends MaterialData {
+
+    public DoublePlant() {
+        super(Material.DOUBLE_PLANT);
+    }
+
+    public DoublePlant(DoublePlantSpecies species) {
+        this();
+        setSpecies(species);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     */
+    @Deprecated
+    public DoublePlant(final int type) {
+        super(type);
+    }
+
+    public DoublePlant(final Material type) {
+        super(type);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public DoublePlant(final int type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public DoublePlant(final Material type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * Gets the current species of this double plant.
+     *
+     * @return The DoublePlantSpecies of this double plant
+     */
+    public DoublePlantSpecies getSpecies() {
+        return DoublePlantSpecies.getByData(getData());
+    }
+
+    /**
+     * Sets the species of this double plant.
+     *
+     * @param species The new species of this double plant
+     */
+    public void setSpecies(DoublePlantSpecies species) {
+        setData(species.getData());
+    }
+
+    @Override
+    public String toString() {
+        return getSpecies() + " " + super.toString();
+    }
+
+    @Override
+    public DoublePlant clone() {
+        return (DoublePlant) super.clone();
+    }
+}
diff --git a/src/main/java/org/bukkit/material/Prismarine.java b/src/main/java/org/bukkit/material/Prismarine.java
new file mode 100644
index 0000000..8aefef5
--- /dev/null
+++ b/src/main/java/org/bukkit/material/Prismarine.java
@@ -0,0 +1,86 @@
+package org.bukkit.material;
+
+import org.bukkit.Material;
+import org.bukkit.material.types.PrismarineType;
+
+/**
+ * Represents the different types of prismarine.
+ */
+public class Prismarine extends MaterialData {
+    public Prismarine() {
+        super(Material.PRISMARINE);
+    }
+
+    public Prismarine(PrismarineType type) {
+        this();
+        setType(type);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     */
+    @Deprecated
+    public Prismarine(final int type) {
+        super(type);
+    }
+
+    public Prismarine(final Material type) {
+        super(type);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Prismarine(final int type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Prismarine(final Material type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * Gets the current type of this prismarine
+     *
+     * @return PrismarineType of this prismarine
+     */
+    public PrismarineType getType() {
+        return PrismarineType.getByData(getData());
+    }
+
+    /**
+     * Sets the type of this prismarine
+     *
+     * @param type New type of this prismarine
+     */
+    public void setType(PrismarineType type) {
+        setData(type.getData());
+    }
+
+    @Override
+    public String toString() {
+        return getType() + " " + super.toString();
+    }
+
+    @Override
+    public Prismarine clone() {
+        return (Prismarine) super.clone();
+    }
+}
+
diff --git a/src/main/java/org/bukkit/material/Sand.java b/src/main/java/org/bukkit/material/Sand.java
new file mode 100644
index 0000000..fe18b5a
--- /dev/null
+++ b/src/main/java/org/bukkit/material/Sand.java
@@ -0,0 +1,85 @@
+package org.bukkit.material;
+
+import org.bukkit.Material;
+import org.bukkit.material.types.SandType;
+
+/**
+ * Represents the different types of sand.
+ */
+public class Sand extends MaterialData {
+    public Sand() {
+        super(Material.SAND);
+    }
+
+    public Sand(SandType type) {
+        this();
+        setType(type);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     */
+    @Deprecated
+    public Sand(final int type) {
+        super(type);
+    }
+
+    public Sand(final Material type) {
+        super(type);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Sand(final int type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Sand(final Material type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * Gets the current type of this sand
+     *
+     * @return SandType of this sand
+     */
+    public SandType getType() {
+        return SandType.getByData(getData());
+    }
+
+    /**
+     * Sets the type of this sand
+     *
+     * @param type New type of this sand
+     */
+    public void setType(SandType type) {
+        setData(type.getData());
+    }
+
+    @Override
+    public String toString() {
+        return getType() + " " + super.toString();
+    }
+
+    @Override
+    public Sand clone() {
+        return (Sand) super.clone();
+    }
+}
diff --git a/src/main/java/org/bukkit/material/Sponge.java b/src/main/java/org/bukkit/material/Sponge.java
new file mode 100644
index 0000000..63f0fe1
--- /dev/null
+++ b/src/main/java/org/bukkit/material/Sponge.java
@@ -0,0 +1,85 @@
+package org.bukkit.material;
+
+import org.bukkit.Material;
+import org.bukkit.material.types.SpongeType;
+
+/**
+ * Represents the different types of sponge.
+ */
+public class Sponge extends MaterialData {
+    public Sponge() {
+        super(Material.SPONGE);
+    }
+
+    public Sponge(SpongeType type) {
+        this();
+        setType(type);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     */
+    @Deprecated
+    public Sponge(final int type) {
+        super(type);
+    }
+
+    public Sponge(final Material type) {
+        super(type);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Sponge(final int type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     *
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Sponge(final Material type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * Gets the current type of this sponge
+     *
+     * @return SpongeType of this sponge
+     */
+    public SpongeType getType() {
+        return SpongeType.getByData(getData());
+    }
+
+    /**
+     * Sets the type of this sponge
+     *
+     * @param type New type of this sponge
+     */
+    public void setType(SpongeType type) {
+        setData(type.getData());
+    }
+
+    @Override
+    public String toString() {
+        return getType() + " " + super.toString();
+    }
+
+    @Override
+    public Sponge clone() {
+        return (Sponge) super.clone();
+    }
+}
diff --git a/src/main/java/org/bukkit/material/Stone.java b/src/main/java/org/bukkit/material/Stone.java
new file mode 100644
index 0000000..2ea20f1
--- /dev/null
+++ b/src/main/java/org/bukkit/material/Stone.java
@@ -0,0 +1,83 @@
+package org.bukkit.material;
+
+import org.bukkit.Material;
+import org.bukkit.material.types.StoneType;
+
+/**
+ * Represents the different types of stone.
+ */
+public class Stone extends MaterialData {
+
+    public Stone() {
+        super(Material.STONE);
+    }
+
+    public Stone(StoneType stone) {
+        this();
+        setType(stone);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     */
+    @Deprecated
+    public Stone(final int type) {
+        super(type);
+    }
+
+    public Stone(final Material type) {
+        super(type);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Stone(final int type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * @deprecated Magic value
+     *
+     * @param type the type
+     * @param data the data
+     */
+    @Deprecated
+    public Stone(final Material type, final byte data) {
+        super(type, data);
+    }
+
+    /**
+     * Gets the current type of this stone.
+     *
+     * @return StoneType of this stone
+     */
+    public StoneType getType() {
+        return StoneType.getByData(getData());
+    }
+
+    /**
+     * Sets the type of this stone.
+     *
+     * @param stone New type of this stone
+     */
+    public void setType(StoneType stone) {
+        setData(stone.getData());
+    }
+
+    @Override
+    public String toString() {
+        return getType() + " " + super.toString();
+    }
+
+    @Override
+    public Stone clone() {
+        return (Stone) super.clone();
+    }
+}
diff --git a/src/main/java/org/bukkit/material/types/DirtType.java b/src/main/java/org/bukkit/material/types/DirtType.java
new file mode 100644
index 0000000..cda0f2e
--- /dev/null
+++ b/src/main/java/org/bukkit/material/types/DirtType.java
@@ -0,0 +1,61 @@
+package org.bukkit.material.types;
+
+
+import com.google.common.collect.Maps;
+
+import java.util.Map;
+
+/**
+ * Represents the three different types of dirt.
+ */
+public enum DirtType {
+    /**
+     * Represents the regular dirt type.
+     */
+    NORMAL(0x0),
+    /**
+     * Represents the coarse dirt type.
+     */
+    COARSE(0x1),
+    /**
+     * Represents the Podzol dirt type.
+     */
+    PODZOL(0x2);
+
+    private final byte data;
+    private final static Map<Byte, DirtType> BY_DATA = Maps.newHashMap();
+
+    private DirtType(final int data) {
+        this.data = (byte) data;
+    }
+
+    /**
+     * Gets the associated data value representing this type.
+     *
+     * @return A byte containing the data value of this dirt type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
+    }
+
+    /**
+     * Gets the DirtType with the given data value.
+     *
+     * @param data The data value to fetch
+     * @return The {@link DirtType} representing the given value, or null
+     *     if it doesn't exist
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static DirtType getByData(final byte data) {
+        return BY_DATA.get(data);
+    }
+
+    static {
+        for (DirtType dirt : values()) {
+            BY_DATA.put(dirt.data, dirt);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/material/types/DoublePlantSpecies.java b/src/main/java/org/bukkit/material/types/DoublePlantSpecies.java
new file mode 100644
index 0000000..7ff4478
--- /dev/null
+++ b/src/main/java/org/bukkit/material/types/DoublePlantSpecies.java
@@ -0,0 +1,76 @@
+package org.bukkit.material.types;
+
+import com.google.common.collect.Maps;
+
+import java.util.Map;
+
+/**
+ * Represents the six different species of double plants.
+ */
+public enum DoublePlantSpecies {
+    /**
+     * Represents the sunflower double plant.
+     */
+    SUNFLOWER(0x0),
+    /**
+     * Represents the lilac double plant.
+     */
+    LILAC(0x1),
+    /**
+     * Represents the tall grass double plant.
+     */
+    DOUBLE_TALLGRASS(0x2),
+    /**
+     * Represents the large fern double plant.
+     */
+    LARGE_FERN(0x3),
+    /**
+     * Represents the rose bush double plant.
+     */
+    ROSE_BUSH(0x4),
+    /**
+     * Represents the peony double plant.
+     */
+    PEONY(0x5),
+    /**
+     * Represents the upper part of a double plant.
+     */
+    PLANT_APEX(0x8);
+
+    private final byte data;
+    private final static Map<Byte, DoublePlantSpecies> BY_DATA = Maps.newHashMap();
+
+    private DoublePlantSpecies(final int data) {
+        this.data = (byte) data;
+    }
+
+    /**
+     * Gets the associated data value representing this species.
+     *
+     * @return A byte containing the data value of this double plant species
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
+    }
+
+    /**
+     * Gets the DoublePlantSpecies with the given data value.
+     *
+     * @param data The data value to fetch
+     * @return The {@link DoublePlantSpecies} representing the given value, or null
+     *     if it doesn't exist
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static DoublePlantSpecies getByData(final byte data) {
+        return BY_DATA.get(data);
+    }
+
+    static {
+        for (DoublePlantSpecies doublePlantSpecies : values()) {
+            BY_DATA.put(doublePlantSpecies.data, doublePlantSpecies);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/material/types/PrismarineType.java b/src/main/java/org/bukkit/material/types/PrismarineType.java
new file mode 100644
index 0000000..238b7bc
--- /dev/null
+++ b/src/main/java/org/bukkit/material/types/PrismarineType.java
@@ -0,0 +1,52 @@
+package org.bukkit.material.types;
+
+import com.google.common.collect.Maps;
+
+import java.util.Map;
+
+/**
+ * Represents the three different types of Prismarine
+ */
+public enum PrismarineType {
+    NORMAL(0x0),
+    BRICK(0x1),
+    DARK(0x2);
+
+    private final byte data;
+    private final static Map<Byte, PrismarineType> BY_DATA = Maps.newHashMap();
+
+    private PrismarineType(final int data) {
+        this.data = (byte) data;
+    }
+
+    /**
+     * Gets the associated data value representing this type of prismarine
+     *
+     * @return A byte containing the data value of this prismarine type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
+    }
+
+    /**
+     * Gets the type of prismarine with the given data value
+     *
+     * @param data Data value to fetch
+     * @return The {@link PrismarineType} representing the given value, or null
+     *     if it doesn't exist
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static PrismarineType getByData(final byte data) {
+        return BY_DATA.get(data);
+    }
+
+    static {
+        for (PrismarineType type : values()) {
+            BY_DATA.put(type.data, type);
+        }
+    }
+}
+
diff --git a/src/main/java/org/bukkit/material/types/SandType.java b/src/main/java/org/bukkit/material/types/SandType.java
new file mode 100644
index 0000000..510a343
--- /dev/null
+++ b/src/main/java/org/bukkit/material/types/SandType.java
@@ -0,0 +1,52 @@
+package org.bukkit.material.types;
+
+
+import com.google.common.collect.Maps;
+
+import java.util.Map;
+
+/**
+ * Represents the two different types of Sand
+ */
+public enum SandType {
+    NORMAL(0x0),
+    RED(0x1);
+
+    private final byte data;
+    private final static Map<Byte, SandType> BY_DATA = Maps.newHashMap();
+
+    private SandType(final int data) {
+        this.data = (byte) data;
+    }
+
+    /**
+     * Gets the associated data value representing this type of sand
+     *
+     * @return A byte containing the data value of this sand type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
+    }
+
+    /**
+     * Gets the type of sand with the given data value
+     *
+     * @param data Data value to fetch
+     * @return The {@link SandType} representing the given value, or null
+     *     if it doesn't exist
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static SandType getByData(final byte data) {
+        return BY_DATA.get(data);
+    }
+
+    static {
+        for (SandType type : values()) {
+            BY_DATA.put(type.data, type);
+        }
+    }
+}
+
diff --git a/src/main/java/org/bukkit/material/types/SpongeType.java b/src/main/java/org/bukkit/material/types/SpongeType.java
new file mode 100644
index 0000000..77cf34e
--- /dev/null
+++ b/src/main/java/org/bukkit/material/types/SpongeType.java
@@ -0,0 +1,50 @@
+package org.bukkit.material.types;
+
+import com.google.common.collect.Maps;
+
+import java.util.Map;
+
+/**
+ * Represents the two different types of Sponge
+ */
+public enum SpongeType {
+    NORMAL(0x0),
+    WET(0x1);
+
+    private final byte data;
+    private final static Map<Byte, SpongeType> BY_DATA = Maps.newHashMap();
+
+    private SpongeType(final int data) {
+        this.data = (byte) data;
+    }
+
+    /**
+     * Gets the associated data value representing this type of sponge
+     *
+     * @return A byte containing the data value of this sponge type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
+    }
+
+    /**
+     * Gets the type of sponge with the given data value
+     *
+     * @param data Data value to fetch
+     * @return The {@link SpongeType} representing the given value, or null
+     *     if it doesn't exist
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static SpongeType getByData(final byte data) {
+        return BY_DATA.get(data);
+    }
+
+    static {
+        for (SpongeType type : values()) {
+            BY_DATA.put(type.data, type);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/material/types/StoneType.java b/src/main/java/org/bukkit/material/types/StoneType.java
new file mode 100644
index 0000000..cc023ed
--- /dev/null
+++ b/src/main/java/org/bukkit/material/types/StoneType.java
@@ -0,0 +1,77 @@
+package org.bukkit.material.types;
+
+import com.google.common.collect.Maps;
+
+import java.util.Map;
+
+/**
+ * Represents the seven different types of stone.
+ */
+public enum StoneType {
+    /**
+     * Represents the normal stone.
+     */
+    NORMAL(0x0),
+    /**
+     * Represents the granite.
+     */
+    GRANITE(0x1),
+    /**
+     * Represents the polished granite.
+     */
+    POLISHED_GRANITE(0x2),
+    /**
+     * Represents the diorite.
+     */
+    DIORITE(0x3),
+    /**
+     * Represents the polished diorite.
+     */
+    POLISHED_DIORITE(0x4),
+    /**
+     * Represents the andesite.
+     */
+    ANDESITE(0x5),
+    /**
+     * Represents the polished andesite.
+     */
+    POLISHED_ANDESITE(0x6);
+
+    private final byte data;
+    private final static Map<Byte, StoneType> BY_DATA = Maps.newHashMap();
+
+    private StoneType(final int data) {
+        this.data = (byte) data;
+    }
+
+    /**
+     * Gets the associated data value representing this type.
+     *
+     * @return A byte containing the data value of this stone type
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public byte getData() {
+        return data;
+    }
+
+    /**
+     * Gets the StoneType with the given data value.
+     *
+     * @param data The data value to fetch
+     * @return The {@link StoneType} representing the given value, or null
+     *     if it doesn't exist
+     * @deprecated Magic value
+     */
+    @Deprecated
+    public static StoneType getByData(final byte data) {
+        return BY_DATA.get(data);
+    }
+
+    static {
+        for (StoneType stone : values()) {
+            BY_DATA.put(stone.data, stone);
+        }
+    }
+}
+
-- 
2.10.2

