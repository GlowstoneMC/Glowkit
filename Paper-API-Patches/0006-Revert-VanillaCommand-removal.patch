From 1212ff2fea32897143330bb6b14c95b2698f7876 Mon Sep 17 00:00:00 2001
From: momothereal <momothereal.mc@gmail.com>
Date: Fri, 9 Jun 2017 11:00:46 -0400
Subject: [PATCH] Revert VanillaCommand removal


diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 460fda05..6499f4cf 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -19,6 +19,7 @@ import org.bukkit.command.defaults.BukkitCommand;
 import org.bukkit.command.defaults.HelpCommand;
 import org.bukkit.command.defaults.PluginsCommand;
 import org.bukkit.command.defaults.ReloadCommand;
+import org.bukkit.command.defaults.VanillaCommand;
 import org.bukkit.command.defaults.VersionCommand;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
@@ -106,7 +107,7 @@ public class SimpleCommandMap implements CommandMap {
      */
     private synchronized boolean register(@NotNull String label, @NotNull Command command, boolean isAlias, @NotNull String fallbackPrefix) {
         knownCommands.put(fallbackPrefix + ":" + label, command);
-        if ((command instanceof BukkitCommand || isAlias) && knownCommands.containsKey(label)) {
+        if ((command instanceof VanillaCommand || isAlias) && knownCommands.containsKey(label)) {
             // Request is for an alias/fallback command and it conflicts with
             // a existing command or previous alias ignore it
             // Note: This will mean it gets removed from the commands list of active aliases
diff --git a/src/main/java/org/bukkit/command/defaults/VanillaCommand.java b/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
new file mode 100644
index 00000000..9105712b
--- /dev/null
+++ b/src/main/java/org/bukkit/command/defaults/VanillaCommand.java
@@ -0,0 +1,111 @@
+package org.bukkit.command.defaults;
+
+import java.util.List;
+
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+@Deprecated
+public abstract class VanillaCommand extends Command {
+    static final int MAX_COORD = 30000000;
+    static final int MIN_COORD_MINUS_ONE = -30000001;
+    static final int MIN_COORD = -30000000;
+
+    protected VanillaCommand(String name) {
+        super(name);
+    }
+
+    protected VanillaCommand(String name, String description, String usageMessage, List<String> aliases) {
+        super(name, description, usageMessage, aliases);
+    }
+
+    public boolean matches(String input) {
+        return input.equalsIgnoreCase(this.getName());
+    }
+
+    protected int getInteger(CommandSender sender, String value, int min) {
+        return getInteger(sender, value, min, Integer.MAX_VALUE);
+    }
+
+    int getInteger(CommandSender sender, String value, int min, int max) {
+        return getInteger(sender, value, min, max, false);
+    }
+
+    int getInteger(CommandSender sender, String value, int min, int max, boolean Throws) {
+        int i = min;
+
+        try {
+            i = Integer.valueOf(value);
+        } catch (NumberFormatException ex) {
+            if (Throws) {
+                throw new NumberFormatException(String.format("%s is not a valid number", value));
+            }
+        }
+
+        if (i < min) {
+            i = min;
+        } else if (i > max) {
+            i = max;
+        }
+
+        return i;
+    }
+
+    Integer getInteger(String value) {
+        try {
+            return Integer.valueOf(value);
+        } catch (NumberFormatException ex) {
+            return null;
+        }
+    }
+
+    public static double getRelativeDouble(double original, CommandSender sender, String input) {
+        if (input.startsWith("~")) {
+            double value = getDouble(sender, input.substring(1));
+            if (value == MIN_COORD_MINUS_ONE) {
+                return MIN_COORD_MINUS_ONE;
+            }
+            return original + value;
+        } else {
+            return getDouble(sender, input);
+        }
+    }
+
+    public static double getDouble(CommandSender sender, String input) {
+        try {
+            return Double.parseDouble(input);
+        } catch (NumberFormatException ex) {
+            return MIN_COORD_MINUS_ONE;
+        }
+    }
+
+    public static double getDouble(CommandSender sender, String input, double min, double max) {
+        double result = getDouble(sender, input);
+
+        // TODO: This should throw an exception instead.
+        if (result < min) {
+            result = min;
+        } else if (result > max) {
+            result = max;
+        }
+
+        return result;
+    }
+
+    String createString(String[] args, int start) {
+        return createString(args, start, " ");
+    }
+
+    String createString(String[] args, int start, String glue) {
+        StringBuilder string = new StringBuilder();
+
+        for (int x = start; x < args.length; x++) {
+            string.append(args[x]);
+            if (x != args.length - 1) {
+                string.append(glue);
+            }
+        }
+
+        return string.toString();
+    }
+}
-- 
2.30.2

