From 3de206905be517555b1907788fe63571ee0cb739 Mon Sep 17 00:00:00 2001
From: Chris Hennick <seahen123@gmail.com>
Date: Tue, 16 Jan 2018 17:59:11 +0000
Subject: [PATCH] Add PotionDataHolder interface


diff --git a/src/main/java/org/bukkit/entity/AreaEffectCloud.java b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
index f88be2ff..336fa4a0 100644
--- a/src/main/java/org/bukkit/entity/AreaEffectCloud.java
+++ b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
@@ -4,6 +4,7 @@ import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.Particle;
 import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionDataHolder;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.projectiles.ProjectileSource;
@@ -12,7 +13,7 @@ import org.bukkit.projectiles.ProjectileSource;
  * Represents an area effect cloud which will imbue a potion effect onto
  * entities which enter it.
  */
-public interface AreaEffectCloud extends Entity {
+public interface AreaEffectCloud extends Entity, PotionDataHolder {
 
     /**
      * Gets the duration which this cloud will exist for (in ticks).
@@ -222,4 +223,9 @@ public interface AreaEffectCloud extends Entity {
      * @param source the {@link ProjectileSource} that threw the LingeringPotion
      */
     public void setSource(ProjectileSource source);
+
+    @Override
+    default void clearCustomEffects0() {
+        clearCustomEffects();
+    }
 }
diff --git a/src/main/java/org/bukkit/entity/TippedArrow.java b/src/main/java/org/bukkit/entity/TippedArrow.java
index 09b5dd43..1758bbf8 100644
--- a/src/main/java/org/bukkit/entity/TippedArrow.java
+++ b/src/main/java/org/bukkit/entity/TippedArrow.java
@@ -4,84 +4,11 @@ import java.util.List;
 
 import org.bukkit.Color;
 import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionDataHolder;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-public interface TippedArrow extends Arrow {
-
-    /**
-     * Sets the underlying potion data
-     *
-     * @param data PotionData to set the base potion state to
-     */
-    void setBasePotionData(PotionData data);
-
-    /**
-     * Returns the potion data about the base potion
-     *
-     * @return a PotionData object
-     */
-    PotionData getBasePotionData();
-
-    /**
-     * Gets the color of this arrow.
-     *
-     * @return arrow color
-     */
-    Color getColor();
-
-    /**
-     * Sets the color of this arrow. Will be applied as a tint to its particles.
-     *
-     * @param color arrow color
-     */
-    void setColor(Color color);
-
-    /**
-     * Checks for the presence of custom potion effects.
-     *
-     * @return true if custom potion effects are applied
-     */
-    boolean hasCustomEffects();
-
-    /**
-     * Gets an immutable list containing all custom potion effects applied to
-     * this arrow.
-     * <p>
-     * Plugins should check that hasCustomEffects() returns true before calling
-     * this method.
-     *
-     * @return the immutable list of custom potion effects
-     */
-    List<PotionEffect> getCustomEffects();
-
-    /**
-     * Adds a custom potion effect to this arrow.
-     *
-     * @param effect the potion effect to add
-     * @param overwrite true if any existing effect of the same type should be
-     * overwritten
-     * @return true if the effect was added as a result of this call
-     */
-    boolean addCustomEffect(PotionEffect effect, boolean overwrite);
-
-    /**
-     * Removes a custom potion effect from this arrow.
-     *
-     * @param type the potion effect type to remove
-     * @return true if the an effect was removed as a result of this call
-     * @throws IllegalArgumentException if this operation would leave the Arrow
-     * in a state with no Custom Effects and PotionType.UNCRAFTABLE
-     */
-    boolean removeCustomEffect(PotionEffectType type);
-
-    /**
-     * Checks for a specific custom potion effect type on this arrow.
-     *
-     * @param type the potion effect type to check for
-     * @return true if the potion has this effect
-     */
-    boolean hasCustomEffect(PotionEffectType type);
+public interface TippedArrow extends PotionDataHolder, Arrow {
 
     /**
      * Removes all custom potion effects from this arrow.
@@ -90,4 +17,9 @@ public interface TippedArrow extends Arrow {
      * in a state with no Custom Effects and PotionType.UNCRAFTABLE
      */
     void clearCustomEffects();
+    
+    @Override
+    default void clearCustomEffects0() {
+        clearCustomEffects();
+    }
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
index d9151259..68d50b71 100644
--- a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
@@ -1,9 +1,10 @@
 package org.bukkit.inventory.meta;
 
 import org.bukkit.Color;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionDataHolder;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
-import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
 
 import java.util.List;
@@ -11,7 +12,7 @@ import java.util.List;
 /**
  * Represents a potion or item that can have custom effects.
  */
-public interface PotionMeta extends ItemMeta {
+public interface PotionMeta extends ItemMeta, PotionDataHolder {
 
     /**
      * Sets the underlying potion data
diff --git a/src/main/java/org/bukkit/potion/PotionDataHolder.java b/src/main/java/org/bukkit/potion/PotionDataHolder.java
new file mode 100644
index 00000000..338520b0
--- /dev/null
+++ b/src/main/java/org/bukkit/potion/PotionDataHolder.java
@@ -0,0 +1,115 @@
+package org.bukkit.potion;
+
+import java.util.List;
+import org.bukkit.Color;
+
+/**
+ * A mutable object that has fields for color, base potion data and custom effects, like a {@link
+ * PotionMeta}, but is not necessarily an {@link ItemMeta}.
+ */
+public interface PotionDataHolder {
+    /**
+     * Sets the underlying potion data
+     *
+     * @param data PotionData to set the base potion state to
+     */
+    void setBasePotionData(PotionData data);
+
+    /**
+     * Returns the potion data about the base potion
+     *
+     * @return a PotionData object
+     */
+    PotionData getBasePotionData();
+
+    /**
+     * Gets the potion color.
+     *
+     * @return potion color
+     */
+    Color getColor();
+
+    /**
+     * Sets the potion color.
+     *
+     * @param color potion color
+     */
+    void setColor(Color color);
+
+    /**
+     * Checks for the presence of custom potion effects.
+     *
+     * @return true if custom potion effects are applied
+     */
+    boolean hasCustomEffects();
+
+    /**
+     * Gets an immutable list containing all custom potion effects applied to
+     * this arrow.
+     * <p>
+     * Plugins should check that hasCustomEffects() returns true before calling
+     * this method.
+     *
+     * @return the immutable list of custom potion effects
+     */
+    List<PotionEffect> getCustomEffects();
+
+    /**
+     * Adds a custom potion effect to this arrow.
+     *
+     * @param effect the potion effect to add
+     * @param overwrite true if any existing effect of the same type should be
+     * overwritten
+     * @return true if the effect was added as a result of this call
+     */
+    boolean addCustomEffect(PotionEffect effect, boolean overwrite);
+
+    /**
+     * Removes a custom potion effect from this arrow.
+     *
+     * @param type the potion effect type to remove
+     * @return true if the an effect was removed as a result of this call
+     * @throws IllegalArgumentException if this operation would leave the Arrow
+     * in a state with no Custom Effects and PotionType.UNCRAFTABLE
+     */
+    boolean removeCustomEffect(PotionEffectType type);
+
+    /**
+     * Checks for a specific custom potion effect type on this arrow.
+     *
+     * @param type the potion effect type to check for
+     * @return true if the potion has this effect
+     */
+    boolean hasCustomEffect(PotionEffectType type);
+
+    /**
+     * Checks for existence of a potion color.
+     *
+     * @return true if this has a custom potion color
+     */
+    default boolean hasColor() {
+        return getColor() != null;
+    }
+
+    /**
+     * Removes all custom potion effects. This method is renamed because of incompatible return
+     * types between {@link TippedArrow#clearCustomEffects()} and
+     * {@link PotionMeta#clearCustomEffects()}.
+     *
+     * @throws IllegalArgumentException if this would create an impossible item or entity
+     */
+    void clearCustomEffects0();
+    
+    /**
+     * Copies potion data from another instance.
+     *
+     * @param source the object to copy from
+     */
+    default void copyFrom(PotionDataHolder source) {
+        setBasePotionData(source.getBasePotionData());
+        setColor(source.getColor());
+        for (PotionEffect effect : source.getCustomEffects()) {
+            addCustomEffect(effect, true);
+        }
+    }
+}
\ No newline at end of file
-- 
2.14.1

