From fd14466c38b0cc9ccc7ed975f3ace1ed9f5d9340 Mon Sep 17 00:00:00 2001
From: mastercoms <circuitsoft@tuta.io>
Date: Fri, 25 Nov 2016 11:07:38 -0500
Subject: [PATCH] Enhance scoreboard API and commands


diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 533b86a..e3cd87b 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -65,6 +65,8 @@ public class SimpleCommandMap implements CommandMap {
         register("bukkit", new EnchantCommand());
         register("bukkit", new TestForCommand());
         register("bukkit", new EffectCommand());
+        register("bukkit", new ScoreboardCommand());
+        register("bukkit", new TriggerCommand());
         register("bukkit", new PlaySoundCommand());
         register("bukkit", new StopSoundCommand());
         register("bukkit", new SpreadPlayersCommand());
diff --git a/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java b/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
index ff7f562..0f778f8 100644
--- a/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ScoreboardCommand.java
@@ -1,13 +1,7 @@
 package org.bukkit.command.defaults;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
@@ -16,23 +10,17 @@ import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
-import org.bukkit.scoreboard.DisplaySlot;
-import org.bukkit.scoreboard.Objective;
-import org.bukkit.scoreboard.Score;
-import org.bukkit.scoreboard.Scoreboard;
-import org.bukkit.scoreboard.Team;
+import org.bukkit.scoreboard.*;
 import org.bukkit.util.StringUtil;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
+import java.util.*;
 
-@Deprecated
 public class ScoreboardCommand extends VanillaCommand {
 
     private static final List<String> MAIN_CHOICES = ImmutableList.of("objectives", "players", "teams");
     private static final List<String> OBJECTIVES_CHOICES = ImmutableList.of("list", "add", "remove", "setdisplay");
-    private static final List<String> OBJECTIVES_CRITERIA = ImmutableList.of("health", "playerKillCount", "totalKillCount", "deathCount", "dummy");
-    private static final List<String> PLAYERS_CHOICES = ImmutableList.of("set", "add", "remove", "reset", "list");
+    private static final List<String> OBJECTIVES_CRITERIA = ImmutableList.of("health", "playerKillCount", "totalKillCount", "deathCount", "dummy", "trigger");
+    private static final List<String> PLAYERS_CHOICES = ImmutableList.of("set", "add", "remove", "reset", "list", "enable");
     private static final List<String> TEAMS_CHOICES = ImmutableList.of("add", "remove", "join", "leave", "empty", "list", "option");
     private static final List<String> TEAMS_OPTION_CHOICES = ImmutableList.of("color", "friendlyfire", "seeFriendlyInvisibles");
     private static final Map<String, DisplaySlot> OBJECTIVES_DISPLAYSLOT = ImmutableMap.of("belowName", DisplaySlot.BELOW_NAME, "list", DisplaySlot.PLAYER_LIST, "sidebar", DisplaySlot.SIDEBAR);
@@ -263,6 +251,29 @@ public class ScoreboardCommand extends VanillaCommand {
                     }
                 }
             }
+        } else if(args[0].equalsIgnoreCase("enable")) {
+            if (args.length < 4) {
+                sender.sendMessage(ChatColor.RED + "Usage: /scoreboard players enable <player> <trigger>");
+                return false;
+            }
+
+            Objective objective = mainScoreboard.getObjective(args[3]);
+            if (objective == null) {
+                sender.sendMessage(ChatColor.RED + "No objective was found by the name '" + args[3] + "'");
+                return false;
+            }
+
+            if (args[2].equalsIgnoreCase("*")) {
+                for (String player : mainScoreboard.getEntries()) {
+                    objective.getScore(player).setLocked(false);
+                    sender.sendMessage("Enabled trigger " + args[3] + " for " + player);
+                }
+                return true;
+            }
+
+            objective.getScore(args[2]).setLocked(false);
+            sender.sendMessage("Enabled trigger " + args[3] + " for " + args[2]);
+            return true;
         } else if (args[0].equalsIgnoreCase("teams")) {
             if (args.length == 1) {
                 sender.sendMessage(ChatColor.RED + "/scoreboard teams <list|add|remove|empty|join|leave|option>");
@@ -512,7 +523,7 @@ public class ScoreboardCommand extends VanillaCommand {
                 if (args.length == 2) {
                     return StringUtil.copyPartialMatches(args[1], PLAYERS_CHOICES, new ArrayList<String>());
                 }
-                if (args[1].equalsIgnoreCase("set") || args[1].equalsIgnoreCase("add") || args[1].equalsIgnoreCase("remove")) {
+                if (args[1].equalsIgnoreCase("set") || args[1].equalsIgnoreCase("add") || args[1].equalsIgnoreCase("remove") || args[1].equalsIgnoreCase("enable")) {
                     if (args.length == 3) {
                         return super.tabComplete(sender, alias, args);
                     }
diff --git a/src/main/java/org/bukkit/command/defaults/TriggerCommand.java b/src/main/java/org/bukkit/command/defaults/TriggerCommand.java
new file mode 100644
index 0000000..5042194
--- /dev/null
+++ b/src/main/java/org/bukkit/command/defaults/TriggerCommand.java
@@ -0,0 +1,99 @@
+package org.bukkit.command.defaults;
+
+import com.google.common.collect.ImmutableList;
+import org.apache.commons.lang.Validate;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.scoreboard.Criterias;
+import org.bukkit.scoreboard.Objective;
+import org.bukkit.scoreboard.Score;
+import org.bukkit.util.StringUtil;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class TriggerCommand extends VanillaCommand {
+
+    private static final List<String> COMPLETIONS = ImmutableList.of("add", "set");
+
+    public TriggerCommand() {
+        super("trigger");
+        this.description = "Change a player's score for a given objective";
+        this.usageMessage = "/trigger";
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (args.length < 3) {
+            sender.sendMessage(ChatColor.RED + "Usage: /trigger <objective> <add|set> <value>");
+            return false;
+        }
+
+        Objective objective;
+        Player player;
+
+        if (sender instanceof Player) {
+            player = (Player) sender;
+            objective = Bukkit.getScoreboardManager().getMainScoreboard().getObjective(args[0]);
+        } else {
+            sender.sendMessage("Only players can use the /trigger command");
+            return false;
+        }
+
+        if (objective == null) {
+            sender.sendMessage(ChatColor.RED + "Invalid trigger name " + args[0]);
+            return false;
+        }
+
+        if (objective.getScore(player.getName()).getLocked()) {
+            sender.sendMessage(ChatColor.RED + "Trigger " + objective.getName() + " is not enabled");
+            return false;
+        }
+
+        int value;
+
+        try {
+            value = Integer.valueOf(args[2]);
+        } catch (NumberFormatException e) {
+            sender.sendMessage(ChatColor.RED + "'" + args[2] + "' is not a valid number");
+            return false;
+        }
+
+        Score score = objective.getScore(player.getName());
+
+        if (args[1].equalsIgnoreCase("add")) {
+            score.setScore(score.getScore() + value);
+            score.setLocked(true);
+            sender.sendMessage("Trigger " + args[0] + " changed with add " + value);
+            return true;
+        } else if (args[1].equalsIgnoreCase("set")) {
+            score.setScore(value);
+            score.setLocked(true);
+            sender.sendMessage("Trigger " + args[0] + " changed with set " + value);
+            return true;
+        }
+        sender.sendMessage("Invalid trigger mode " + args[1]);
+        return false;
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+        Validate.notNull(sender, "Sender cannot be null");
+        Validate.notNull(args, "Arguments cannot be null");
+        Validate.notNull(alias, "Alias cannot be null");
+
+        if (args.length == 1) {
+            if (sender instanceof Player) {
+                List<String> objectives = Bukkit.getScoreboardManager().getMainScoreboard().getObjectivesByCriteria(Criterias.TRIGGER).stream().map(Objective::getName).collect(Collectors.toList());
+                return objectives;
+            }
+        } else if (args.length == 2) {
+            return StringUtil.copyPartialMatches(args[1], COMPLETIONS, new ArrayList<String>(COMPLETIONS.size()));
+        }
+
+        return ImmutableList.of();
+    }
+}
diff --git a/src/main/java/org/bukkit/scoreboard/Criterias.java b/src/main/java/org/bukkit/scoreboard/Criterias.java
index cd81c87..395ec1f 100644
--- a/src/main/java/org/bukkit/scoreboard/Criterias.java
+++ b/src/main/java/org/bukkit/scoreboard/Criterias.java
@@ -8,12 +8,14 @@ public class Criterias {
     public static final String PLAYER_KILLS;
     public static final String TOTAL_KILLS;
     public static final String DEATHS;
+    public static final String TRIGGER;
 
     static {
         HEALTH="health";
         PLAYER_KILLS="playerKillCount";
         TOTAL_KILLS="totalKillCount";
         DEATHS="deathCount";
+        TRIGGER="trigger";
     }
 
     private Criterias() {}
diff --git a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
index 5d58a18..204befa 100644
--- a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
+++ b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
@@ -4,7 +4,16 @@ package org.bukkit.scoreboard;
  * Locations for displaying objectives to the player
  */
 public enum DisplaySlot {
+    /**
+     * Displays underneath their nameplate in-game.
+     */
     BELOW_NAME,
+    /**
+     * Displays in the tab-menu, next to their name.
+     */
     PLAYER_LIST,
-    SIDEBAR;
+    /**
+     * Displays in the sidebar on the right-hand side of the screen.
+     */
+    SIDEBAR
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java
index 321aac7..2bc2aab 100644
--- a/src/main/java/org/bukkit/scoreboard/Objective.java
+++ b/src/main/java/org/bukkit/scoreboard/Objective.java
@@ -2,6 +2,8 @@ package org.bukkit.scoreboard;
 
 import org.bukkit.OfflinePlayer;
 
+import java.util.Set;
+
 /**
  * An objective on a scoreboard that can show scores specific to entries. This
  * objective is only relevant to the display of the associated {@link
@@ -86,6 +88,22 @@ public interface Objective {
     DisplaySlot getDisplaySlot() throws IllegalStateException;
 
     /**
+     * Sets this objective to display with the specified render type.
+     *
+     * @param type the new render type for this objective
+     * @throws IllegalStateException if this objective has been unregistered
+     */
+    void setType(RenderType type) throws IllegalStateException;
+
+    /**
+     * Gets the render type of this objective.
+     *
+     * @return the render type for this objective
+     * @throws IllegalStateException if this objective has been unregistered
+     */
+    RenderType getType() throws IllegalStateException;
+
+    /**
      * Gets a player's Score for an Objective on this Scoreboard
      *
      * @param player Player for the Score
@@ -107,4 +125,22 @@ public interface Objective {
      * @throws IllegalStateException if this objective has been unregistered
      */
     Score getScore(String entry) throws IllegalArgumentException, IllegalStateException;
+
+    /**
+     * Gets whether a score exists for the given entry.
+     *
+     * @param entry The entry to check for
+     * @throws IllegalArgumentException if entry is null
+     * @throws IllegalStateException if this objective has been unregistered
+     * @return true if the entry is in this objective
+     */
+    boolean hasScore(String entry) throws IllegalArgumentException, IllegalStateException;
+
+    /**
+     * Gets a set of all entries for this objective.
+     *
+     * @return entries A set of entries.
+     * @throws IllegalStateException if this objective has been unregistered
+     */
+    Set<String> getEntries() throws IllegalStateException;
 }
diff --git a/src/main/java/org/bukkit/scoreboard/RenderType.java b/src/main/java/org/bukkit/scoreboard/RenderType.java
new file mode 100644
index 0000000..dc9f7e4
--- /dev/null
+++ b/src/main/java/org/bukkit/scoreboard/RenderType.java
@@ -0,0 +1,16 @@
+package org.bukkit.scoreboard;
+
+/**
+ * Render types for {@link Objective}s.
+ */
+public enum RenderType {
+    /**
+     * Displays scores as numbers.
+     */
+    INTEGER,
+    /**
+     * Displays scores as hearts, similar to hearts shown to a player to indicate their health.
+     * Only valid for the {@link DisplaySlot#PLAYER_LIST} display slot.
+     */
+    HEARTS
+}
diff --git a/src/main/java/org/bukkit/scoreboard/Score.java b/src/main/java/org/bukkit/scoreboard/Score.java
index 2410cbd..ded4e91 100644
--- a/src/main/java/org/bukkit/scoreboard/Score.java
+++ b/src/main/java/org/bukkit/scoreboard/Score.java
@@ -69,4 +69,24 @@ public interface Score {
      *     {@link Objective#unregister() unregistered}
      */
     Scoreboard getScoreboard();
+
+    /**
+     * Gets whether or not this score is locked. This is only meaningful
+     * for objectives with the criteria {@link Criterias#TRIGGER TRIGGER}.
+     *
+     * @return locked whether or not this score is locked
+     * @throws IllegalStateException if the associated objective has been
+     *     unregistered
+     */
+    boolean getLocked();
+
+    /**
+     * Sets whether or not this score is locked. This is only meaningful
+     * for objectives with the criteria {@link Criterias#TRIGGER TRIGGER}.
+     *
+     * @param locked The new locked state
+     * @throws IllegalStateException if the associated objective has been
+     *     unregistered
+     */
+    void setLocked(boolean locked);
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index 9052b4a..7209b79 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -1,10 +1,11 @@
 package org.bukkit.scoreboard;
 
-import java.util.Set;
-
+import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.potion.PotionEffectType;
 
+import java.util.Set;
+
 /**
  * A team on a scoreboard that has a common display theme and other
  * properties. This team is only relevant to the display of the associated
@@ -132,6 +133,23 @@ public interface Team {
     void setNameTagVisibility(NameTagVisibility visibility) throws IllegalArgumentException;
 
     /**
+     * Gets the color of a team
+     * This is only used for the team color sidebar slots
+     * @return color
+     * @throws IllegalStateException if this team has been unregistered
+     */
+    ChatColor getColor() throws IllegalStateException;
+
+    /**
+     * Sets color of a team
+     * This is only used for the team color sidebar slots
+     *
+     * @param color color
+     * @throws IllegalStateException if this team has been unregistered
+     */
+    void setColor(ChatColor color) throws IllegalStateException;
+
+    /**
      * Gets the Set of players on the team
      *
      * @return players on the team
-- 
2.10.2

